/*
** NOTE: This file is generated by Gulp and should not be edited directly!
** Any changes made directly to this file will be overwritten next time its asset group is processed by Gulp.
*/

angular
    .module("LayoutEditor")
    .directive("orcLayoutTile", ["scopeConfigurator", "environment",
        function (scopeConfigurator, environment) {
            return {
                restrict: "E",
                scope: { element: "=" },
                controller: ["$scope", "$element", "$attrs",
                    function ($scope, $element, $attrs) {
                        scopeConfigurator.configureForElement($scope, $element);
                        scopeConfigurator.configureForContainer($scope, $element);
                        $scope.sortableOptions["axis"] = "y";
                    }
                ],
                templateUrl: environment.templateUrl("Tile"),
                replace: true,
                link: function ($scope, $element, $attrs) {
                    $element.on("change", "[ng-model='element.backgroundSize']", function () {
                        $scope.element.applyBackground();
                    });
                }
            };
        }
    ]);
var LayoutEditor;
(function (LayoutEditor) {

    LayoutEditor.Tile = function (data, contentType, htmlId, htmlClass, htmlStyle, isTemplated, rule, hasEditor, children) {
        var self = this;

        // Inherit from the Element base class.
        LayoutEditor.Element.call(self, "Tile", data, htmlId, htmlClass, htmlStyle, isTemplated, rule);

        // Inherit from the Container base class.
        LayoutEditor.Container.call(self, ["Canvas", "Grid", "Content"], children);

        // This Tile element is containable, which means it can be added to any container, including Tiles.
        self.isContainable = true;

        // Used by the layout editor to determine if it should launch
        // the element editor dialog when creating new Tile elements.
        // Also used by our "LayoutEditor.Template.Tile.cshtml" view that is used as the layout-tile directive's template.
        self.hasEditor = hasEditor;

        // The element type name, which is sent back to the element editor controller when being edited.
        self.contentType = contentType;

        // The "layout-common-holder" CSS class is used by the layout editor to identify drop targets.
        self.dropTargetClass = "layout-common-holder";

        // Implements the toObject serialization function.
        // This is called when the layout is being serialized into JSON.
        var toObject = self.toObject; // Get a reference to the default implementation before we override it.
        self.toObject = function () {
            var result = toObject(); // Invoke the original (base) implementation.
            result.children = self.childrenToObject();
            return result;
        };
    };

    // Implements the factory function invoked by the element factory.
    LayoutEditor.Tile.from = function (value) {
        var result = new LayoutEditor.Tile(
            value.data,
            value.contentType,
            value.htmlId,
            value.htmlClass,
            value.htmlStyle,
            value.isTemplated,
            value.rule,
            value.hasEditor,
            LayoutEditor.childrenFrom(value.children));

        // Initializes the toolbox specific properties.
        result.toolboxIcon = value.toolboxIcon;
        result.toolboxLabel = value.toolboxLabel;
        result.toolboxDescription = value.toolboxDescription;

        return result;
    };

    // Registers the factory function with the element factory.
    LayoutEditor.registerFactory("Tile", function (value) {
        return LayoutEditor.Tile.from(value);
    });

})(LayoutEditor || (LayoutEditor = {}));


//var LayoutEditor;
//(function (LayoutEditor) {

//    LayoutEditor.Tile = function (data, contentType, htmlId, htmlClass, htmlStyle, isTemplated, rule, hasEditor, backgroundUrl, backgroundSize, children) {
//        var self = this;

//        // Inherit from the Element base class.
//        LayoutEditor.Element.call(self, "Tile", data, htmlId, htmlClass, htmlStyle, isTemplated, rule);

//        // Inherit from the Container base class.
//        LayoutEditor.Container.call(self, ["Canvas", "Grid", "Content"], children);

//        // This Tile element is containable, which means it can be added to any container, including Tiles.
//        self.isContainable = true;

//        // Used by the layout editor to determine if it should launch
//        // the element editor dialog when creating new Tile elements.
//        // Also used by our "LayoutEditor.Template.Tile.cshtml" view that is used as the layout-tile directive's template.
//        self.hasEditor = hasEditor;

//        // The element type name, which is sent back to the element editor controller when being edited.
//        self.contentType = contentType;

//        // The "layout-common-holder" CSS class is used by the layout editor to identify drop targets.
//        self.dropTargetClass = "layout-common-holder";

//        // The configured background image URL and background size.
//        self.backgroundUrl = backgroundUrl;
//        self.backgroundSize = backgroundSize;

//        // Implements the toObject serialization function.
//        // This is called when the layout is being serialized into JSON.
//        var toObject = self.toObject; // Get a reference to the default implementation before we override it.
//        self.toObject = function () {
//            var result = toObject(); // Invoke the original (base) implementation.
//            result.children = self.childrenToObject();
//            result.backgroundUrl = self.backgroundUrl;
//            result.backgroundSize = self.backgroundSize;
//            return result;
//        };

//        // Override the getEditorObject so we can include our backgroundSize property.
//        // This is called when the element editor dialog is being invoked and we need to
//        // pass in the client side values.
//        var getEditorObjectBase = this.getEditorObject;
//        this.getEditorObject = function () {
//            var props = getEditorObjectBase();
//            props.BackgroundSize = self.backgroundSize;
//            return props;
//        }

//        // Executed after the element editor dialog closes.
//        this.applyElementEditorModel = function (data) {
//            self.backgroundUrl = data.backgroundUrl;
//            self.backgroundSize = data.backgroundSize;
//            self.applyBackground();
//        }

//        this.hasBackground = function () {
//            return self.backgroundUrl && self.backgroundUrl.length > 0;
//        };

//        this.applyBackground = function () {
//            if (self.hasBackground()) {
//                var styles = {
//                    "background-image": "url('" + self.backgroundUrl + "')",
//                    "background-size": self.backgroundSize && self.backgroundSize.length > 0 ? self.backgroundSize : "cover"
//                };

//                if (self.children.length == 0)
//                    self.templateStyles = styles;
//                else
//                    self.containerTemplateStyles = styles;
//            }
//            else {
//                self.templateStyles = {};
//                self.containerTemplateStyles = {};
//            }
//        }

//        self.applyBackground();
//    };

//    // Implements the factory function invoked by the element factory.
//    LayoutEditor.Tile.from = function (value) {
//        var result = new LayoutEditor.Tile(
//            value.data,
//            value.contentType,
//            value.htmlId,
//            value.htmlClass,
//            value.htmlStyle,
//            value.isTemplated,
//            value.rule,
//            value.hasEditor,
//            value.backgroundUrl,
//            value.backgroundSize,
//            LayoutEditor.childrenFrom(value.children));

//        // Initializes the toolbox specific properties.
//        result.toolboxIcon = value.toolboxIcon;
//        result.toolboxLabel = value.toolboxLabel;
//        result.toolboxDescription = value.toolboxDescription;

//        return result;
//    };

//    // Registers the factory function with the element factory.
//    LayoutEditor.registerFactory("Tile", function (value) {
//        return LayoutEditor.Tile.from(value);
//    });

//})(LayoutEditor || (LayoutEditor = {}));

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlRpbGVFbGVtZW50LmpzIiwiRGlyZWN0aXZlLmpzIiwiTW9kZWwuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEFDTEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FDdkJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6IlRpbGVFbGVtZW50LmpzIiwic291cmNlc0NvbnRlbnQiOltudWxsLCJhbmd1bGFyXHJcbiAgICAubW9kdWxlKFwiTGF5b3V0RWRpdG9yXCIpXHJcbiAgICAuZGlyZWN0aXZlKFwib3JjTGF5b3V0VGlsZVwiLCBbXCJzY29wZUNvbmZpZ3VyYXRvclwiLCBcImVudmlyb25tZW50XCIsXHJcbiAgICAgICAgZnVuY3Rpb24gKHNjb3BlQ29uZmlndXJhdG9yLCBlbnZpcm9ubWVudCkge1xyXG4gICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgcmVzdHJpY3Q6IFwiRVwiLFxyXG4gICAgICAgICAgICAgICAgc2NvcGU6IHsgZWxlbWVudDogXCI9XCIgfSxcclxuICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6IFtcIiRzY29wZVwiLCBcIiRlbGVtZW50XCIsIFwiJGF0dHJzXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gKCRzY29wZSwgJGVsZW1lbnQsICRhdHRycykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzY29wZUNvbmZpZ3VyYXRvci5jb25maWd1cmVGb3JFbGVtZW50KCRzY29wZSwgJGVsZW1lbnQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzY29wZUNvbmZpZ3VyYXRvci5jb25maWd1cmVGb3JDb250YWluZXIoJHNjb3BlLCAkZWxlbWVudCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5zb3J0YWJsZU9wdGlvbnNbXCJheGlzXCJdID0gXCJ5XCI7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgXSxcclxuICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiBlbnZpcm9ubWVudC50ZW1wbGF0ZVVybChcIlRpbGVcIiksXHJcbiAgICAgICAgICAgICAgICByZXBsYWNlOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgbGluazogZnVuY3Rpb24gKCRzY29wZSwgJGVsZW1lbnQsICRhdHRycykge1xyXG4gICAgICAgICAgICAgICAgICAgICRlbGVtZW50Lm9uKFwiY2hhbmdlXCIsIFwiW25nLW1vZGVsPSdlbGVtZW50LmJhY2tncm91bmRTaXplJ11cIiwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZWxlbWVudC5hcHBseUJhY2tncm91bmQoKTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9XHJcbiAgICBdKTsiLCJ2YXIgTGF5b3V0RWRpdG9yO1xyXG4oZnVuY3Rpb24gKExheW91dEVkaXRvcikge1xyXG5cclxuICAgIExheW91dEVkaXRvci5UaWxlID0gZnVuY3Rpb24gKGRhdGEsIGNvbnRlbnRUeXBlLCBodG1sSWQsIGh0bWxDbGFzcywgaHRtbFN0eWxlLCBpc1RlbXBsYXRlZCwgcnVsZSwgaGFzRWRpdG9yLCBjaGlsZHJlbikge1xyXG4gICAgICAgIHZhciBzZWxmID0gdGhpcztcclxuXHJcbiAgICAgICAgLy8gSW5oZXJpdCBmcm9tIHRoZSBFbGVtZW50IGJhc2UgY2xhc3MuXHJcbiAgICAgICAgTGF5b3V0RWRpdG9yLkVsZW1lbnQuY2FsbChzZWxmLCBcIlRpbGVcIiwgZGF0YSwgaHRtbElkLCBodG1sQ2xhc3MsIGh0bWxTdHlsZSwgaXNUZW1wbGF0ZWQsIHJ1bGUpO1xyXG5cclxuICAgICAgICAvLyBJbmhlcml0IGZyb20gdGhlIENvbnRhaW5lciBiYXNlIGNsYXNzLlxyXG4gICAgICAgIExheW91dEVkaXRvci5Db250YWluZXIuY2FsbChzZWxmLCBbXCJDYW52YXNcIiwgXCJHcmlkXCIsIFwiQ29udGVudFwiXSwgY2hpbGRyZW4pO1xyXG5cclxuICAgICAgICAvLyBUaGlzIFRpbGUgZWxlbWVudCBpcyBjb250YWluYWJsZSwgd2hpY2ggbWVhbnMgaXQgY2FuIGJlIGFkZGVkIHRvIGFueSBjb250YWluZXIsIGluY2x1ZGluZyBUaWxlcy5cclxuICAgICAgICBzZWxmLmlzQ29udGFpbmFibGUgPSB0cnVlO1xyXG5cclxuICAgICAgICAvLyBVc2VkIGJ5IHRoZSBsYXlvdXQgZWRpdG9yIHRvIGRldGVybWluZSBpZiBpdCBzaG91bGQgbGF1bmNoXHJcbiAgICAgICAgLy8gdGhlIGVsZW1lbnQgZWRpdG9yIGRpYWxvZyB3aGVuIGNyZWF0aW5nIG5ldyBUaWxlIGVsZW1lbnRzLlxyXG4gICAgICAgIC8vIEFsc28gdXNlZCBieSBvdXIgXCJMYXlvdXRFZGl0b3IuVGVtcGxhdGUuVGlsZS5jc2h0bWxcIiB2aWV3IHRoYXQgaXMgdXNlZCBhcyB0aGUgbGF5b3V0LXRpbGUgZGlyZWN0aXZlJ3MgdGVtcGxhdGUuXHJcbiAgICAgICAgc2VsZi5oYXNFZGl0b3IgPSBoYXNFZGl0b3I7XHJcblxyXG4gICAgICAgIC8vIFRoZSBlbGVtZW50IHR5cGUgbmFtZSwgd2hpY2ggaXMgc2VudCBiYWNrIHRvIHRoZSBlbGVtZW50IGVkaXRvciBjb250cm9sbGVyIHdoZW4gYmVpbmcgZWRpdGVkLlxyXG4gICAgICAgIHNlbGYuY29udGVudFR5cGUgPSBjb250ZW50VHlwZTtcclxuXHJcbiAgICAgICAgLy8gVGhlIFwibGF5b3V0LWNvbW1vbi1ob2xkZXJcIiBDU1MgY2xhc3MgaXMgdXNlZCBieSB0aGUgbGF5b3V0IGVkaXRvciB0byBpZGVudGlmeSBkcm9wIHRhcmdldHMuXHJcbiAgICAgICAgc2VsZi5kcm9wVGFyZ2V0Q2xhc3MgPSBcImxheW91dC1jb21tb24taG9sZGVyXCI7XHJcblxyXG4gICAgICAgIC8vIEltcGxlbWVudHMgdGhlIHRvT2JqZWN0IHNlcmlhbGl6YXRpb24gZnVuY3Rpb24uXHJcbiAgICAgICAgLy8gVGhpcyBpcyBjYWxsZWQgd2hlbiB0aGUgbGF5b3V0IGlzIGJlaW5nIHNlcmlhbGl6ZWQgaW50byBKU09OLlxyXG4gICAgICAgIHZhciB0b09iamVjdCA9IHNlbGYudG9PYmplY3Q7IC8vIEdldCBhIHJlZmVyZW5jZSB0byB0aGUgZGVmYXVsdCBpbXBsZW1lbnRhdGlvbiBiZWZvcmUgd2Ugb3ZlcnJpZGUgaXQuXHJcbiAgICAgICAgc2VsZi50b09iamVjdCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIHJlc3VsdCA9IHRvT2JqZWN0KCk7IC8vIEludm9rZSB0aGUgb3JpZ2luYWwgKGJhc2UpIGltcGxlbWVudGF0aW9uLlxyXG4gICAgICAgICAgICByZXN1bHQuY2hpbGRyZW4gPSBzZWxmLmNoaWxkcmVuVG9PYmplY3QoKTtcclxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgICAgICB9O1xyXG4gICAgfTtcclxuXHJcbiAgICAvLyBJbXBsZW1lbnRzIHRoZSBmYWN0b3J5IGZ1bmN0aW9uIGludm9rZWQgYnkgdGhlIGVsZW1lbnQgZmFjdG9yeS5cclxuICAgIExheW91dEVkaXRvci5UaWxlLmZyb20gPSBmdW5jdGlvbiAodmFsdWUpIHtcclxuICAgICAgICB2YXIgcmVzdWx0ID0gbmV3IExheW91dEVkaXRvci5UaWxlKFxyXG4gICAgICAgICAgICB2YWx1ZS5kYXRhLFxyXG4gICAgICAgICAgICB2YWx1ZS5jb250ZW50VHlwZSxcclxuICAgICAgICAgICAgdmFsdWUuaHRtbElkLFxyXG4gICAgICAgICAgICB2YWx1ZS5odG1sQ2xhc3MsXHJcbiAgICAgICAgICAgIHZhbHVlLmh0bWxTdHlsZSxcclxuICAgICAgICAgICAgdmFsdWUuaXNUZW1wbGF0ZWQsXHJcbiAgICAgICAgICAgIHZhbHVlLnJ1bGUsXHJcbiAgICAgICAgICAgIHZhbHVlLmhhc0VkaXRvcixcclxuICAgICAgICAgICAgTGF5b3V0RWRpdG9yLmNoaWxkcmVuRnJvbSh2YWx1ZS5jaGlsZHJlbikpO1xyXG5cclxuICAgICAgICAvLyBJbml0aWFsaXplcyB0aGUgdG9vbGJveCBzcGVjaWZpYyBwcm9wZXJ0aWVzLlxyXG4gICAgICAgIHJlc3VsdC50b29sYm94SWNvbiA9IHZhbHVlLnRvb2xib3hJY29uO1xyXG4gICAgICAgIHJlc3VsdC50b29sYm94TGFiZWwgPSB2YWx1ZS50b29sYm94TGFiZWw7XHJcbiAgICAgICAgcmVzdWx0LnRvb2xib3hEZXNjcmlwdGlvbiA9IHZhbHVlLnRvb2xib3hEZXNjcmlwdGlvbjtcclxuXHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgIH07XHJcblxyXG4gICAgLy8gUmVnaXN0ZXJzIHRoZSBmYWN0b3J5IGZ1bmN0aW9uIHdpdGggdGhlIGVsZW1lbnQgZmFjdG9yeS5cclxuICAgIExheW91dEVkaXRvci5yZWdpc3RlckZhY3RvcnkoXCJUaWxlXCIsIGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgICAgIHJldHVybiBMYXlvdXRFZGl0b3IuVGlsZS5mcm9tKHZhbHVlKTtcclxuICAgIH0pO1xyXG5cclxufSkoTGF5b3V0RWRpdG9yIHx8IChMYXlvdXRFZGl0b3IgPSB7fSkpO1xyXG5cclxuXHJcbi8vdmFyIExheW91dEVkaXRvcjtcclxuLy8oZnVuY3Rpb24gKExheW91dEVkaXRvcikge1xyXG5cclxuLy8gICAgTGF5b3V0RWRpdG9yLlRpbGUgPSBmdW5jdGlvbiAoZGF0YSwgY29udGVudFR5cGUsIGh0bWxJZCwgaHRtbENsYXNzLCBodG1sU3R5bGUsIGlzVGVtcGxhdGVkLCBydWxlLCBoYXNFZGl0b3IsIGJhY2tncm91bmRVcmwsIGJhY2tncm91bmRTaXplLCBjaGlsZHJlbikge1xyXG4vLyAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xyXG5cclxuLy8gICAgICAgIC8vIEluaGVyaXQgZnJvbSB0aGUgRWxlbWVudCBiYXNlIGNsYXNzLlxyXG4vLyAgICAgICAgTGF5b3V0RWRpdG9yLkVsZW1lbnQuY2FsbChzZWxmLCBcIlRpbGVcIiwgZGF0YSwgaHRtbElkLCBodG1sQ2xhc3MsIGh0bWxTdHlsZSwgaXNUZW1wbGF0ZWQsIHJ1bGUpO1xyXG5cclxuLy8gICAgICAgIC8vIEluaGVyaXQgZnJvbSB0aGUgQ29udGFpbmVyIGJhc2UgY2xhc3MuXHJcbi8vICAgICAgICBMYXlvdXRFZGl0b3IuQ29udGFpbmVyLmNhbGwoc2VsZiwgW1wiQ2FudmFzXCIsIFwiR3JpZFwiLCBcIkNvbnRlbnRcIl0sIGNoaWxkcmVuKTtcclxuXHJcbi8vICAgICAgICAvLyBUaGlzIFRpbGUgZWxlbWVudCBpcyBjb250YWluYWJsZSwgd2hpY2ggbWVhbnMgaXQgY2FuIGJlIGFkZGVkIHRvIGFueSBjb250YWluZXIsIGluY2x1ZGluZyBUaWxlcy5cclxuLy8gICAgICAgIHNlbGYuaXNDb250YWluYWJsZSA9IHRydWU7XHJcblxyXG4vLyAgICAgICAgLy8gVXNlZCBieSB0aGUgbGF5b3V0IGVkaXRvciB0byBkZXRlcm1pbmUgaWYgaXQgc2hvdWxkIGxhdW5jaFxyXG4vLyAgICAgICAgLy8gdGhlIGVsZW1lbnQgZWRpdG9yIGRpYWxvZyB3aGVuIGNyZWF0aW5nIG5ldyBUaWxlIGVsZW1lbnRzLlxyXG4vLyAgICAgICAgLy8gQWxzbyB1c2VkIGJ5IG91ciBcIkxheW91dEVkaXRvci5UZW1wbGF0ZS5UaWxlLmNzaHRtbFwiIHZpZXcgdGhhdCBpcyB1c2VkIGFzIHRoZSBsYXlvdXQtdGlsZSBkaXJlY3RpdmUncyB0ZW1wbGF0ZS5cclxuLy8gICAgICAgIHNlbGYuaGFzRWRpdG9yID0gaGFzRWRpdG9yO1xyXG5cclxuLy8gICAgICAgIC8vIFRoZSBlbGVtZW50IHR5cGUgbmFtZSwgd2hpY2ggaXMgc2VudCBiYWNrIHRvIHRoZSBlbGVtZW50IGVkaXRvciBjb250cm9sbGVyIHdoZW4gYmVpbmcgZWRpdGVkLlxyXG4vLyAgICAgICAgc2VsZi5jb250ZW50VHlwZSA9IGNvbnRlbnRUeXBlO1xyXG5cclxuLy8gICAgICAgIC8vIFRoZSBcImxheW91dC1jb21tb24taG9sZGVyXCIgQ1NTIGNsYXNzIGlzIHVzZWQgYnkgdGhlIGxheW91dCBlZGl0b3IgdG8gaWRlbnRpZnkgZHJvcCB0YXJnZXRzLlxyXG4vLyAgICAgICAgc2VsZi5kcm9wVGFyZ2V0Q2xhc3MgPSBcImxheW91dC1jb21tb24taG9sZGVyXCI7XHJcblxyXG4vLyAgICAgICAgLy8gVGhlIGNvbmZpZ3VyZWQgYmFja2dyb3VuZCBpbWFnZSBVUkwgYW5kIGJhY2tncm91bmQgc2l6ZS5cclxuLy8gICAgICAgIHNlbGYuYmFja2dyb3VuZFVybCA9IGJhY2tncm91bmRVcmw7XHJcbi8vICAgICAgICBzZWxmLmJhY2tncm91bmRTaXplID0gYmFja2dyb3VuZFNpemU7XHJcblxyXG4vLyAgICAgICAgLy8gSW1wbGVtZW50cyB0aGUgdG9PYmplY3Qgc2VyaWFsaXphdGlvbiBmdW5jdGlvbi5cclxuLy8gICAgICAgIC8vIFRoaXMgaXMgY2FsbGVkIHdoZW4gdGhlIGxheW91dCBpcyBiZWluZyBzZXJpYWxpemVkIGludG8gSlNPTi5cclxuLy8gICAgICAgIHZhciB0b09iamVjdCA9IHNlbGYudG9PYmplY3Q7IC8vIEdldCBhIHJlZmVyZW5jZSB0byB0aGUgZGVmYXVsdCBpbXBsZW1lbnRhdGlvbiBiZWZvcmUgd2Ugb3ZlcnJpZGUgaXQuXHJcbi8vICAgICAgICBzZWxmLnRvT2JqZWN0ID0gZnVuY3Rpb24gKCkge1xyXG4vLyAgICAgICAgICAgIHZhciByZXN1bHQgPSB0b09iamVjdCgpOyAvLyBJbnZva2UgdGhlIG9yaWdpbmFsIChiYXNlKSBpbXBsZW1lbnRhdGlvbi5cclxuLy8gICAgICAgICAgICByZXN1bHQuY2hpbGRyZW4gPSBzZWxmLmNoaWxkcmVuVG9PYmplY3QoKTtcclxuLy8gICAgICAgICAgICByZXN1bHQuYmFja2dyb3VuZFVybCA9IHNlbGYuYmFja2dyb3VuZFVybDtcclxuLy8gICAgICAgICAgICByZXN1bHQuYmFja2dyb3VuZFNpemUgPSBzZWxmLmJhY2tncm91bmRTaXplO1xyXG4vLyAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XHJcbi8vICAgICAgICB9O1xyXG5cclxuLy8gICAgICAgIC8vIE92ZXJyaWRlIHRoZSBnZXRFZGl0b3JPYmplY3Qgc28gd2UgY2FuIGluY2x1ZGUgb3VyIGJhY2tncm91bmRTaXplIHByb3BlcnR5LlxyXG4vLyAgICAgICAgLy8gVGhpcyBpcyBjYWxsZWQgd2hlbiB0aGUgZWxlbWVudCBlZGl0b3IgZGlhbG9nIGlzIGJlaW5nIGludm9rZWQgYW5kIHdlIG5lZWQgdG9cclxuLy8gICAgICAgIC8vIHBhc3MgaW4gdGhlIGNsaWVudCBzaWRlIHZhbHVlcy5cclxuLy8gICAgICAgIHZhciBnZXRFZGl0b3JPYmplY3RCYXNlID0gdGhpcy5nZXRFZGl0b3JPYmplY3Q7XHJcbi8vICAgICAgICB0aGlzLmdldEVkaXRvck9iamVjdCA9IGZ1bmN0aW9uICgpIHtcclxuLy8gICAgICAgICAgICB2YXIgcHJvcHMgPSBnZXRFZGl0b3JPYmplY3RCYXNlKCk7XHJcbi8vICAgICAgICAgICAgcHJvcHMuQmFja2dyb3VuZFNpemUgPSBzZWxmLmJhY2tncm91bmRTaXplO1xyXG4vLyAgICAgICAgICAgIHJldHVybiBwcm9wcztcclxuLy8gICAgICAgIH1cclxuXHJcbi8vICAgICAgICAvLyBFeGVjdXRlZCBhZnRlciB0aGUgZWxlbWVudCBlZGl0b3IgZGlhbG9nIGNsb3Nlcy5cclxuLy8gICAgICAgIHRoaXMuYXBwbHlFbGVtZW50RWRpdG9yTW9kZWwgPSBmdW5jdGlvbiAoZGF0YSkge1xyXG4vLyAgICAgICAgICAgIHNlbGYuYmFja2dyb3VuZFVybCA9IGRhdGEuYmFja2dyb3VuZFVybDtcclxuLy8gICAgICAgICAgICBzZWxmLmJhY2tncm91bmRTaXplID0gZGF0YS5iYWNrZ3JvdW5kU2l6ZTtcclxuLy8gICAgICAgICAgICBzZWxmLmFwcGx5QmFja2dyb3VuZCgpO1xyXG4vLyAgICAgICAgfVxyXG5cclxuLy8gICAgICAgIHRoaXMuaGFzQmFja2dyb3VuZCA9IGZ1bmN0aW9uICgpIHtcclxuLy8gICAgICAgICAgICByZXR1cm4gc2VsZi5iYWNrZ3JvdW5kVXJsICYmIHNlbGYuYmFja2dyb3VuZFVybC5sZW5ndGggPiAwO1xyXG4vLyAgICAgICAgfTtcclxuXHJcbi8vICAgICAgICB0aGlzLmFwcGx5QmFja2dyb3VuZCA9IGZ1bmN0aW9uICgpIHtcclxuLy8gICAgICAgICAgICBpZiAoc2VsZi5oYXNCYWNrZ3JvdW5kKCkpIHtcclxuLy8gICAgICAgICAgICAgICAgdmFyIHN0eWxlcyA9IHtcclxuLy8gICAgICAgICAgICAgICAgICAgIFwiYmFja2dyb3VuZC1pbWFnZVwiOiBcInVybCgnXCIgKyBzZWxmLmJhY2tncm91bmRVcmwgKyBcIicpXCIsXHJcbi8vICAgICAgICAgICAgICAgICAgICBcImJhY2tncm91bmQtc2l6ZVwiOiBzZWxmLmJhY2tncm91bmRTaXplICYmIHNlbGYuYmFja2dyb3VuZFNpemUubGVuZ3RoID4gMCA/IHNlbGYuYmFja2dyb3VuZFNpemUgOiBcImNvdmVyXCJcclxuLy8gICAgICAgICAgICAgICAgfTtcclxuXHJcbi8vICAgICAgICAgICAgICAgIGlmIChzZWxmLmNoaWxkcmVuLmxlbmd0aCA9PSAwKVxyXG4vLyAgICAgICAgICAgICAgICAgICAgc2VsZi50ZW1wbGF0ZVN0eWxlcyA9IHN0eWxlcztcclxuLy8gICAgICAgICAgICAgICAgZWxzZVxyXG4vLyAgICAgICAgICAgICAgICAgICAgc2VsZi5jb250YWluZXJUZW1wbGF0ZVN0eWxlcyA9IHN0eWxlcztcclxuLy8gICAgICAgICAgICB9XHJcbi8vICAgICAgICAgICAgZWxzZSB7XHJcbi8vICAgICAgICAgICAgICAgIHNlbGYudGVtcGxhdGVTdHlsZXMgPSB7fTtcclxuLy8gICAgICAgICAgICAgICAgc2VsZi5jb250YWluZXJUZW1wbGF0ZVN0eWxlcyA9IHt9O1xyXG4vLyAgICAgICAgICAgIH1cclxuLy8gICAgICAgIH1cclxuXHJcbi8vICAgICAgICBzZWxmLmFwcGx5QmFja2dyb3VuZCgpO1xyXG4vLyAgICB9O1xyXG5cclxuLy8gICAgLy8gSW1wbGVtZW50cyB0aGUgZmFjdG9yeSBmdW5jdGlvbiBpbnZva2VkIGJ5IHRoZSBlbGVtZW50IGZhY3RvcnkuXHJcbi8vICAgIExheW91dEVkaXRvci5UaWxlLmZyb20gPSBmdW5jdGlvbiAodmFsdWUpIHtcclxuLy8gICAgICAgIHZhciByZXN1bHQgPSBuZXcgTGF5b3V0RWRpdG9yLlRpbGUoXHJcbi8vICAgICAgICAgICAgdmFsdWUuZGF0YSxcclxuLy8gICAgICAgICAgICB2YWx1ZS5jb250ZW50VHlwZSxcclxuLy8gICAgICAgICAgICB2YWx1ZS5odG1sSWQsXHJcbi8vICAgICAgICAgICAgdmFsdWUuaHRtbENsYXNzLFxyXG4vLyAgICAgICAgICAgIHZhbHVlLmh0bWxTdHlsZSxcclxuLy8gICAgICAgICAgICB2YWx1ZS5pc1RlbXBsYXRlZCxcclxuLy8gICAgICAgICAgICB2YWx1ZS5ydWxlLFxyXG4vLyAgICAgICAgICAgIHZhbHVlLmhhc0VkaXRvcixcclxuLy8gICAgICAgICAgICB2YWx1ZS5iYWNrZ3JvdW5kVXJsLFxyXG4vLyAgICAgICAgICAgIHZhbHVlLmJhY2tncm91bmRTaXplLFxyXG4vLyAgICAgICAgICAgIExheW91dEVkaXRvci5jaGlsZHJlbkZyb20odmFsdWUuY2hpbGRyZW4pKTtcclxuXHJcbi8vICAgICAgICAvLyBJbml0aWFsaXplcyB0aGUgdG9vbGJveCBzcGVjaWZpYyBwcm9wZXJ0aWVzLlxyXG4vLyAgICAgICAgcmVzdWx0LnRvb2xib3hJY29uID0gdmFsdWUudG9vbGJveEljb247XHJcbi8vICAgICAgICByZXN1bHQudG9vbGJveExhYmVsID0gdmFsdWUudG9vbGJveExhYmVsO1xyXG4vLyAgICAgICAgcmVzdWx0LnRvb2xib3hEZXNjcmlwdGlvbiA9IHZhbHVlLnRvb2xib3hEZXNjcmlwdGlvbjtcclxuXHJcbi8vICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4vLyAgICB9O1xyXG5cclxuLy8gICAgLy8gUmVnaXN0ZXJzIHRoZSBmYWN0b3J5IGZ1bmN0aW9uIHdpdGggdGhlIGVsZW1lbnQgZmFjdG9yeS5cclxuLy8gICAgTGF5b3V0RWRpdG9yLnJlZ2lzdGVyRmFjdG9yeShcIlRpbGVcIiwgZnVuY3Rpb24gKHZhbHVlKSB7XHJcbi8vICAgICAgICByZXR1cm4gTGF5b3V0RWRpdG9yLlRpbGUuZnJvbSh2YWx1ZSk7XHJcbi8vICAgIH0pO1xyXG5cclxuLy99KShMYXlvdXRFZGl0b3IgfHwgKExheW91dEVkaXRvciA9IHt9KSk7XHJcbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
