/*
** NOTE: This file is generated by Gulp and should not be edited directly!
** Any changes made directly to this file will be overwritten next time its asset group is processed by Gulp.
*/

(function ($) {
    // Slides preview.
    var applyCssScale = function (element, scale, translate) {
        var browserPrefixes = ["", "-ms-", "-moz-", "-webkit-", "-o-"],
            offset = ((1 - scale) * 50) + "%",
            scaleString = (translate !== false ? "translate(-" + offset + ", -" + offset + ") " : "") + "scale(" + scale + "," + scale + ")";
        $(browserPrefixes).each(function () {
            element
                .css(this + "transform", scaleString);
        });
        element
            .data({ scale: scale })
            .addClass("scaled");
    };

    var scaleSlides = function () {
        $(".slides")
            .css("display", "block")
            .each(function () {
                var slideshow = $(this),
                    slide = slideshow.find(".slide-preview"),
                    parent = slide.parent(),
                    width = 150,
                    height = 150,
                    boundingDimension = 150,
                    slideStyle = slide.attr("style");

                if ((slideStyle != null && slideStyle.indexOf("width:") == -1)) width = 1024;
                if ((slideStyle != null && slideStyle.indexOf("height:") == -1)) height = 768;

                slide.css({
                    width: width + "px",
                    height: height + "px",
                    position: "absolute"
                });
                var scaledForWidth = width > height,
                    largestDimension = (scaledForWidth ? width : height),
                    scale = boundingDimension / largestDimension;

                parent.css({
                    width: Math.floor(width * scale) + "px",
                    height: Math.floor(height * scale) + "px",
                    position: "relative",
                    overflow: "hidden"
                });

                applyCssScale(slide, scale);
                slideshow.parent(".slides-wrapper").css("overflow", "visible");
            });
    };

    $(window).load(function () {
        scaleSlides();
    });

    // Sortable slides.
    $(function () {
        $(".slides-wrapper.interactive").each(function () {
            var wrapper = $(this);

            var showChangedMessage = function () {
                wrapper.find(".dirty-message").show();
            };

            var onSlideIndexChanged = function (e, ui) {
                showChangedMessage();
            };

            var slidesList = wrapper.find("ul.slides");
            slidesList.sortable({
                placeholder: "sortable-placeholder",
                stop: onSlideIndexChanged
            });
            slidesList.disableSelection();
        });
    });
})(jQuery);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIlNsaWRlU2hvdy5BZG1pbi5qcyIsIkFkbWluLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxBQ0xBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiU2xpZGVTaG93LkFkbWluLmpzIiwic291cmNlc0NvbnRlbnQiOltudWxsLCIoZnVuY3Rpb24gKCQpIHtcclxuICAgIC8vIFNsaWRlcyBwcmV2aWV3LlxyXG4gICAgdmFyIGFwcGx5Q3NzU2NhbGUgPSBmdW5jdGlvbiAoZWxlbWVudCwgc2NhbGUsIHRyYW5zbGF0ZSkge1xyXG4gICAgICAgIHZhciBicm93c2VyUHJlZml4ZXMgPSBbXCJcIiwgXCItbXMtXCIsIFwiLW1vei1cIiwgXCItd2Via2l0LVwiLCBcIi1vLVwiXSxcclxuICAgICAgICAgICAgb2Zmc2V0ID0gKCgxIC0gc2NhbGUpICogNTApICsgXCIlXCIsXHJcbiAgICAgICAgICAgIHNjYWxlU3RyaW5nID0gKHRyYW5zbGF0ZSAhPT0gZmFsc2UgPyBcInRyYW5zbGF0ZSgtXCIgKyBvZmZzZXQgKyBcIiwgLVwiICsgb2Zmc2V0ICsgXCIpIFwiIDogXCJcIikgKyBcInNjYWxlKFwiICsgc2NhbGUgKyBcIixcIiArIHNjYWxlICsgXCIpXCI7XHJcbiAgICAgICAgJChicm93c2VyUHJlZml4ZXMpLmVhY2goZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBlbGVtZW50XHJcbiAgICAgICAgICAgICAgICAuY3NzKHRoaXMgKyBcInRyYW5zZm9ybVwiLCBzY2FsZVN0cmluZyk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgZWxlbWVudFxyXG4gICAgICAgICAgICAuZGF0YSh7IHNjYWxlOiBzY2FsZSB9KVxyXG4gICAgICAgICAgICAuYWRkQ2xhc3MoXCJzY2FsZWRcIik7XHJcbiAgICB9O1xyXG5cclxuICAgIHZhciBzY2FsZVNsaWRlcyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAkKFwiLnNsaWRlc1wiKVxyXG4gICAgICAgICAgICAuY3NzKFwiZGlzcGxheVwiLCBcImJsb2NrXCIpXHJcbiAgICAgICAgICAgIC5lYWNoKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHZhciBzbGlkZXNob3cgPSAkKHRoaXMpLFxyXG4gICAgICAgICAgICAgICAgICAgIHNsaWRlID0gc2xpZGVzaG93LmZpbmQoXCIuc2xpZGUtcHJldmlld1wiKSxcclxuICAgICAgICAgICAgICAgICAgICBwYXJlbnQgPSBzbGlkZS5wYXJlbnQoKSxcclxuICAgICAgICAgICAgICAgICAgICB3aWR0aCA9IDE1MCxcclxuICAgICAgICAgICAgICAgICAgICBoZWlnaHQgPSAxNTAsXHJcbiAgICAgICAgICAgICAgICAgICAgYm91bmRpbmdEaW1lbnNpb24gPSAxNTAsXHJcbiAgICAgICAgICAgICAgICAgICAgc2xpZGVTdHlsZSA9IHNsaWRlLmF0dHIoXCJzdHlsZVwiKTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoKHNsaWRlU3R5bGUgIT0gbnVsbCAmJiBzbGlkZVN0eWxlLmluZGV4T2YoXCJ3aWR0aDpcIikgPT0gLTEpKSB3aWR0aCA9IDEwMjQ7XHJcbiAgICAgICAgICAgICAgICBpZiAoKHNsaWRlU3R5bGUgIT0gbnVsbCAmJiBzbGlkZVN0eWxlLmluZGV4T2YoXCJoZWlnaHQ6XCIpID09IC0xKSkgaGVpZ2h0ID0gNzY4O1xyXG5cclxuICAgICAgICAgICAgICAgIHNsaWRlLmNzcyh7XHJcbiAgICAgICAgICAgICAgICAgICAgd2lkdGg6IHdpZHRoICsgXCJweFwiLFxyXG4gICAgICAgICAgICAgICAgICAgIGhlaWdodDogaGVpZ2h0ICsgXCJweFwiLFxyXG4gICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiBcImFic29sdXRlXCJcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgdmFyIHNjYWxlZEZvcldpZHRoID0gd2lkdGggPiBoZWlnaHQsXHJcbiAgICAgICAgICAgICAgICAgICAgbGFyZ2VzdERpbWVuc2lvbiA9IChzY2FsZWRGb3JXaWR0aCA/IHdpZHRoIDogaGVpZ2h0KSxcclxuICAgICAgICAgICAgICAgICAgICBzY2FsZSA9IGJvdW5kaW5nRGltZW5zaW9uIC8gbGFyZ2VzdERpbWVuc2lvbjtcclxuXHJcbiAgICAgICAgICAgICAgICBwYXJlbnQuY3NzKHtcclxuICAgICAgICAgICAgICAgICAgICB3aWR0aDogTWF0aC5mbG9vcih3aWR0aCAqIHNjYWxlKSArIFwicHhcIixcclxuICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IE1hdGguZmxvb3IoaGVpZ2h0ICogc2NhbGUpICsgXCJweFwiLFxyXG4gICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiBcInJlbGF0aXZlXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgb3ZlcmZsb3c6IFwiaGlkZGVuXCJcclxuICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgIGFwcGx5Q3NzU2NhbGUoc2xpZGUsIHNjYWxlKTtcclxuICAgICAgICAgICAgICAgIHNsaWRlc2hvdy5wYXJlbnQoXCIuc2xpZGVzLXdyYXBwZXJcIikuY3NzKFwib3ZlcmZsb3dcIiwgXCJ2aXNpYmxlXCIpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgIH07XHJcblxyXG4gICAgJCh3aW5kb3cpLmxvYWQoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHNjYWxlU2xpZGVzKCk7XHJcbiAgICB9KTtcclxuXHJcbiAgICAvLyBTb3J0YWJsZSBzbGlkZXMuXHJcbiAgICAkKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAkKFwiLnNsaWRlcy13cmFwcGVyLmludGVyYWN0aXZlXCIpLmVhY2goZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgd3JhcHBlciA9ICQodGhpcyk7XHJcblxyXG4gICAgICAgICAgICB2YXIgc2hvd0NoYW5nZWRNZXNzYWdlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgd3JhcHBlci5maW5kKFwiLmRpcnR5LW1lc3NhZ2VcIikuc2hvdygpO1xyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgdmFyIG9uU2xpZGVJbmRleENoYW5nZWQgPSBmdW5jdGlvbiAoZSwgdWkpIHtcclxuICAgICAgICAgICAgICAgIHNob3dDaGFuZ2VkTWVzc2FnZSgpO1xyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgdmFyIHNsaWRlc0xpc3QgPSB3cmFwcGVyLmZpbmQoXCJ1bC5zbGlkZXNcIik7XHJcbiAgICAgICAgICAgIHNsaWRlc0xpc3Quc29ydGFibGUoe1xyXG4gICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI6IFwic29ydGFibGUtcGxhY2Vob2xkZXJcIixcclxuICAgICAgICAgICAgICAgIHN0b3A6IG9uU2xpZGVJbmRleENoYW5nZWRcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHNsaWRlc0xpc3QuZGlzYWJsZVNlbGVjdGlvbigpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfSk7XHJcbn0pKGpRdWVyeSk7Il0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
